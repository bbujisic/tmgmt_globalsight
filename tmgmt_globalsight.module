<?php

global $base_url;
//define('GLOBALSIGHT_WSDL_URL', ($base_url . '/' . drupal_get_path('module', 'tmgmt_globalsight') . '/AmbassadorWebService.xml'));
define('GLOBALSIGHT_WSDL_URL', 'file://' . dirname(__FILE__) . '/AmbassadorWebService.xml');

define('GLOBALSIGHT_JOB_ARCHIVED', 0);
define('GLOBALSIGHT_JOB_SUBMITTED', 1);

/**
 * Implements hook_cron().
 */
function tmgmt_globalsight_cron() {
  // Skip if disabled.
  if (variable_get('tmgmt_globalsight_download_on_cron', 1) != 1) {
    return;
  }
  tmgmt_globalsight_get_all();
}

/**
 * Implements hook_theme().
 */
function tmgmt_globalsight_theme() {
  return array(
    'tmgmt_globalsight_form_table' => array(
      // The renderable element is the form.
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function tmgmt_globalsight_menu() {
  $items['admin/tmgmt/gs'] = array(
    'title' => 'TMGMT GlobalSight settings',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tmgmt_globalsight_admin_form'),
    'file' => 'inc/tmgmt_globalsight.admin.inc',
    'access arguments' => array('access administration pages'),
  );

  $items['admin/tmgmt/gs/jobs'] = array(
    'title' => 'TMGMT GlobalSight jobs',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tmgmt_globalsight_jobs_form'),
    'file' => 'inc/tmgmt_globalsight.admin.inc',
    'access arguments' => array('access administration pages'),
  );

  $items['admin/tmgmt/gs/test'] = array(
    'title' => 'TMGMT GlobalSight test',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'tmgmt_globalsight_test',
    'file' => 'inc/tmgmt_globalsight.diagnostics.inc',
    'access arguments' => array('access administration pages'),
  );

  return $items;
}


function tmgmt_globalsight_update_links($sourceLanguage, $targetLanguage, $string) {
  preg_match_all('#<a\s.*?(?:href=[\'"](.*?)[\'"]).*?>#is', $string, $matches);
  $links = $matches[1];


  $languages = language_list();//tmgmt_available_languages();

  if (!($sourcePrefix = $languages[$sourceLanguage]->prefix) || !($targetPrefix = $languages[$targetLanguage]->prefix)) {
    return false;
  }


  foreach ($links as $link) {
    if (strpos($link, $sourceLanguage) !== FALSE) {
      $linkReplacement = str_replace($sourcePrefix, $targetPrefix, $link);
      $string = str_replace($link, $linkReplacement, $string);
    }
  }
  return $string;
}

/**
 * Implements hook_tmgmt_ui_job_checkout_before_alter().
 * If there are multiple languages per checkout -- try to merge them into one GS job.
 *
 * @param $redirects
 * @param $jobs
 */
function tmgmt_globalsight_tmgmt_ui_job_checkout_before_alter(&$redirects, &$jobs) {

  // I do not want to intervene if there will be a single job.
  if (count($jobs) < 2) {
    return;
  }
  foreach ($jobs as $key => $job) {
    // All jobs but the first one will be "children jobs"
    if ($key > 0) {
      $job->translator = 'gs';
      if ($job->isTranslatable()) {
        // Consider child job as added to translation queue.
        $job->setState(TMGMT_JOB_STATE_ACTIVE);
        // Add the job to the list of associated jobs in parent job
        $jobs[0]->settings['associated_jobs'][$job->tjid] = $job->target_language;
        // Flag this job as a child job (cannot be translated individually)
        $job->settings['child_job'] = true;
        $job->label = 'GlobalSight child';

        $params = array(
          '@url' => '/admin/tmgmt/jobs/' . $jobs[0]->tjid,
          '@tjid' => $jobs[0]->tjid,
        );

        $job->addMessage(t('This job was sent to GlobalSight as part of job <a href="@url">@tjid</a>. It cannot be translated individually.', $params));
      } else {
        // The child job is not translatable.
        $params = array(
          '@url' => '/admin/tmgmt/jobs/' . $job->tjid,
          '@tjid' => $job->tjid,
        );
        $message = t('Job <a href="@url">@tjid</a> is not translatable. It will be skipped.', $params);
        $jobs[0]->addMessage($message);
      }
      $job->save();
    }
  }
  $jobs[0]->save();

  $redirects[] = 'admin/tmgmt/jobs/' . $jobs[0]->tjid;
}

/**
 * Implements hook_form_alter().
 */
function tmgmt_globalsight_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id != 'tmgmt_job_form') {
    return;
  }

  // Make sure there -are- associated jobs before we start tempering with the form
  if (!isset($form_state['tmgmt_job']->settings['associated_jobs']) || count($form_state['tmgmt_job']->settings['associated_jobs']) == 0) {
    return;
  }

  // Load available languages and make nice list of associated jobs
  $available = tmgmt_available_languages();

  // Inject children job items to the job items list
  $form['job_items_wrapper']['items']['#markup'] = '<h1>' . t('Target language:') . ' ' . $available[$form_state['tmgmt_job']->target_language] . '</h1>' . $form['job_items_wrapper']['items']['#markup'];

  $targets = array($available[$form_state['tmgmt_job']->target_language]);
  foreach ($form_state['tmgmt_job']->settings['associated_jobs'] as $ctjid => $language) {
    $targets[] = $available[$language];

    // Load child tjid and inject it's job items into $form['job_items_wrapper']['items']['#markup']
    if ($view = views_get_view('tmgmt_ui_job_items')) {
      $cjob = tmgmt_job_load($ctjid);
      //dsm($cjob);
      $form['job_items_wrapper']['items']['#markup'] .= '<h1>' . t('Target language:') . ' ' . $available[$language] . '</h1>';
      $form['job_items_wrapper']['items']['#markup'] .= $view->preview($cjob->isSubmittable() ? 'submit' : 'block', array($ctjid));
    }


  }
  // Add approve all button
  if (isset($form_state['tmgmt_job']->settings['translated']) && $form_state['tmgmt_job']->state == TMGMT_JOB_STATE_ACTIVE) {
    $form['job_items_wrapper']['approve_all'] = array(
      '#type' => 'submit',
      '#value' => t('Accept all translations'),
      '#submit' => array('tmgmt_globalsight_approve_all'),
    );
  }

  // Language selector will be disabled and hidden because there will be multiple languages
  $form['info']['target_language']['#disabled'] = true;
  $form['info']['target_language']['#title'] = t('Target languages');
  $form['info']['target_language']['#field_prefix'] = '<div class="element-invisible element-hidden">';
  $form['info']['target_language']['#field_suffix'] = '</div>' . implode('<br />', $targets);

  // Set proper title of the page
  drupal_set_title(t('@title (@source to @target)', array(
    '@title' => $form_state['tmgmt_job']->label(),
    '@source' => $available[$form_state['tmgmt_job']->source_language],
    '@target' => implode(', ', $targets),
  )));
}

function tmgmt_globalsight_approve_all($form, $form_state) {
  foreach($form_state['tmgmt_job']->settings['associated_jobs'] as $tjid => $lang) {
    $job = tmgmt_job_load($tjid);
    if($job) {
      $jobItems = $job->getItems();
      foreach ($jobItems as $jobItem) {
        // I want to do my magic to entity translations only.
        if($jobItem->plugin !== "entity") {
          $jobItem->accepted();
          continue;
        }
        $entity = entity_load_single($jobItem->item_type, $jobItem->item_id);
        tmgmt_field_populate_entity($jobItem->item_type, $entity, $job->target_language, $jobItem->getData());

        $handler = entity_translation_get_handler($jobItem->item_type, $entity, TRUE);
        $handler->setFormLanguage($job->target_language);

        $translation = array(
          'translate' => 0,
          'status' => TRUE,
          'language' => $job->target_language,
          'source' => $job->source_language,
        );
        $handler->setTranslation($translation);
        $handler->saveTranslations();

        entity_save($jobItem->item_type, $entity);
        $jobItem->accepted();
      }
    }
  }
  $form_state['tmgmt_job']->acceptTranslation();
}


function tmgmt_globalsight_get_all() {
  // Retrieve the list of all opened jobs
  $result = db_select('tmgmt_globalsight', 't')
    ->fields('t')
    ->condition('status', GLOBALSIGHT_JOB_ARCHIVED, '>')
    ->execute();

  $links = array();
  // Loop through jobs and check for translations
  while ($record = $result->fetchAssoc()) {
    $job = tmgmt_job_load($record['tjid']);
    if (!$job) {
      continue;
    }
    if (tmgmt_globalsight_ping($job, $record)) {
      $links[] = l('Job ' . $job->tjid . ': ' . $job->label, 'admin/tmgmt/jobs/' . $job->tjid);
    };
  }
  $output = format_plural(count($links), '1 translation job received.', '@count translation jobs received.');
  $output .= theme('item_list', array('items' => $links));

  drupal_set_message($output, 'status');
}


/**
 * Retrieves job data from GS server and, if status is "Exported" or "Localized"
 * recieves translation and adds translated data.
 *
 * @param $job
 *   Loaded TMGMT Job object.
 * @param $record
 *   {tmgmt_globalsight} record connecting TMGMT and GS jobs
 * @return bool
 */
function tmgmt_globalsight_ping($job, $record) {


  $translator = $job->getTranslator();

  // Initialize GlobalSight
  $gs = new TMGMTGlobalSightConnector($translator);

  $status = $gs->getStatus($record['job_name']);

  if ($status === "PERMANENT ERROR") {
    // Update our little mapping table -- archive job
    $record['status'] = GLOBALSIGHT_JOB_ARCHIVED;
    drupal_write_record('tmgmt_globalsight', $record, array('tjid'));
    $job->aborted('Translation job was cancelled due to unrecoverable error.');
    return false;
  }

  // Skip execution if GlobalSight status hasn't changed
  if ($status['status'] == $gs->code2status($record['status'])) {
    return false;
  }

  // So we have translations now!
  if ($status['status'] == 'EXPORTED' || $status['status'] == 'LOCALIZED') {
    // Get remote language mappings ('en' => 'en_US')
    $map = $translator->settings['remote_languages_mappings'];


    // Send API request to GS
    $translation = $gs->receive($record['job_name']);

    // Something wrong happened...
    if (!$translation) {
      return false;
    }

    // Run link localization (if enabled)
    if (variable_get('tmgmt_globalsight_localize_links', 0) == 1) {
      foreach ($translation as $gs_lang => $values) {
        $targetLanguage = array_search($gs_lang, $map);
        foreach ($values as $field => $value) {
          foreach ($value as $key => $string) {
            $translation[$gs_lang][$field][$key] = tmgmt_globalsight_update_links($job->source_language, $targetLanguage, $string);
          }
        }
      }
    }

    // The translation "might" contain records for multiple jobs.
    if (isset($job->settings['associated_jobs'])) {
      foreach ($job->settings['associated_jobs'] as $associated_tjid => $associated_lang) {
        $gs_lang = $map[$associated_lang];
        if (isset($translation[$gs_lang])) {
          $associated_job = tmgmt_job_load($associated_tjid);
          $associated_job->setState(TMGMT_JOB_STATE_ACTIVE);


          // We sent tjiids of original job as keys to Globalsight. Now we need to convert these (wrong) tjiids into
          // ones belonging to appropriate parent job.

          // First we are loading good tjiids
          $items = $associated_job->getItems();
          $tjiids = array_keys($items);

          // Next we are remapping wrong tjiids we got from GlobalSight to proper ones
          $i = 0;
          $translated_data = array();
          foreach (tmgmt_unflatten_data($translation[$gs_lang]) as $wrong_tjiid => $data) {
            $translated_data[$tjiids[$i]] = $data;
            $i++;
          };

          $associated_job->addTranslatedData($translated_data);

          $job->addMessage(t('Translation to @language finished.', array('@language' => $associated_lang)));

        } else {
          // We still do not have translation!
        }
      }
    }

    // Update translations per each job item
    $job->addTranslatedData(tmgmt_unflatten_data($translation[$map[$job->target_language]]));

    $job->settings['translated'] = true;
    $job->save();

    // Update our little mapping table -- archive job
    $record['status'] = GLOBALSIGHT_JOB_ARCHIVED;
    drupal_write_record('tmgmt_globalsight', $record, array('tjid'));
    return true;
  }
}

/**
 * Implements hook_tmgmt_translator_plugin_info().
 */
function tmgmt_globalsight_tmgmt_translator_plugin_info() {
  return array(
    'gs' => array(
      'label' => t('GlobalSight translator'),
      'description' => t('An open source translation management service.'),
      'plugin controller class' => 'TMGMTGlobalSightTranslatorPluginController',
      'ui controller class' => 'TMGMTGlobalSightTranslatorUIController',
      'default settings' => array(
        'endpoint' => '',
        'username' => '',
        'password' => '',
      ),
    ),
  );
}

function _tmgmt_globalsight_delete_job($tjid) {
  // Delete previous jobs (if any).
  $num_deleted = db_delete('tmgmt_globalsight')
    ->condition('tjid', $tjid)
    ->execute();

  return $num_deleted;
}

function _tmgmt_globalsight_archive_job($tjid) {
  $num_updated = db_update('tmgmt_globalsight')
    ->fields(array('status' => GLOBALSIGHT_JOB_ARCHIVED))
    ->condition('tjid', $tjid)
    ->execute();

  return $num_updated;
}

function tmgmt_globalsight_set_status($tjid, $status) {
  $num_updated = db_update('tmgmt_globalsight')
    ->fields(array('status' => $status))
    ->condition('tjid', $tjid)
    ->execute();

  return $num_updated;
}

function _tmgmt_globalsight_statuses($selected = null) {
  $statuses = array(
    GLOBALSIGHT_JOB_ARCHIVED => t('Archived'),
    GLOBALSIGHT_JOB_SUBMITTED => t('Submitted')
  );

  if ($selected != null && isset($statuses[$selected])) {
    $statuses[$selected] .= " (" . t("Default value") . ")";
  }

  return $statuses;
}
